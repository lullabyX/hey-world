import type { Metadata } from 'next';
import { Geist, Geist_Mono } from 'next/font/google';
import './globals.css';
import SiteHeader from '@hey-world/components/src/site-header';
import ThemeProvider from '@hey-world/components/src/theme-provider';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

// Define colors outside (adjust to your theme; e.g., from COLORS object)
const META_THEME_COLORS = {
  light: '#ffffff', // Default light background
  dark: '#121212', // Dark background (matches your --background: 240 10% 3.9% â‰ˆ #121212)
};

// ... existing code (RootLayout) ...

const ThemeScript = () => {
  const themeScriptFunction = () => {
    try {
      // Step 1: Check for explicit 'dark' preference in localStorage
      const isExplicitDark = localStorage.theme === 'dark';

      // Step 2: Check if we should follow system preferences
      // (no theme saved, or explicitly set to 'system')
      const shouldFollowSystem =
        !('theme' in localStorage) || localStorage.theme === 'system';

      // Step 3: Detect system dark mode via media query
      const isSystemDark = window.matchMedia(
        '(prefers-color-scheme: dark)'
      ).matches;

      // Step 4: Decide if dark mode is active
      // (explicit dark OR (follow system AND system is dark))
      const isDarkMode = isExplicitDark || (shouldFollowSystem && isSystemDark);

      // Step 5: If dark mode, update the meta tag's content
      if (isDarkMode) {
        const metaTag = document.querySelector('meta[name="theme-color"]');
        if (metaTag) {
          metaTag.setAttribute('content', META_THEME_COLORS.dark);
        }
      } else {
        const metaTag = document.querySelector('meta[name="theme-color"]');
        if (metaTag) {
          metaTag.setAttribute('content', META_THEME_COLORS.light);
        }
      }
    } catch (error) {
      console.error('Theme meta update failed:', error);
    }
  };

  return (
    <script
      dangerouslySetInnerHTML={{ __html: `(${themeScriptFunction})()` }}
    />
  );
};

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <meta name="theme-color" content="#ffffff" />
        <ThemeScript />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} flex min-h-screen flex-col antialiased`}
      >
        <ThemeProvider>
          <SiteHeader
            title="hey"
            titleHref="/"
            pages={[
              { name: 'Blog', href: '/blog' },
              { name: 'About', href: '/about' },
              { name: 'Contact', href: '/contact' },
            ]}
          />
          {children}
        </ThemeProvider>
      </body>
    </html>
  );
}
